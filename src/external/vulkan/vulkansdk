#!/bin/sh
# Copyright (c) 2015-2019 LunarG, Inc.
set -e

usage() {
    echo "Script to build repositories that are useful for Vulkan development"
    echo ""
    echo "Usage: $0 [all] [help] [glslang] [vulkan-loader|loader]"
    echo "  [vulkan-validationlayers|layers] [vulkan-tools|tools] [vulkantools|lunarg-tools]"
    echo "  [shaderc] [spirv-tools|spirvtools] [spirv-cross|spirvcross] [samples] [vlf] [clean]"
    echo ""
    echo "Any or all options can be specified at once"
    exit
}

buildGlslang() {
	echo "~~~Building glslang Repo~~~"
	cd "$GLSL_DIR"
	[ ! -d External/spirv-tools ] && python update_glslang_sources.py
	[ -d "${GLSL_DIR}/${BUILD_DIR}" ] || mkdir -p "${GLSL_DIR}/${BUILD_DIR}"
	cd "${GLSL_DIR}/${BUILD_DIR}"
	cmake -DCMAKE_BUILD_TYPE="Release" \
	      -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
	      -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
	      -DCMAKE_INSTALL_BINDIR="$BINDIR" ..
	make $MF install    
	cd "$SDKDIR"
}

buildHeaders() {
    echo "~~~Building Vulkan-Headers~~~"
    cd "$VH_DIR"
    [ -d "$VH_DIR/${BUILD_DIR}" ] || mkdir "$VH_DIR/${BUILD_DIR}"
    cd "$VH_DIR/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="Release" -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
	  -DCMAKE_INSTALL_LIBDIR="$LIBDIR" ..
    make $MF install
    cd "$SDKDIR"
}

# Requires Vulkan-Headers
buildLoader() {
    echo "~~~Building Vulkan-Loader~~~"
    cd "$VL_DIR"
    [ -d "${VL_DIR}/${BUILD_DIR}" ] || mkdir -p "${VL_DIR}/${BUILD_DIR}"
    cd "${VL_DIR}/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
	  -DVULKAN_HEADERS_INSTALL_DIR="$ARCHDIR" \
	  -DVULKAN_REGISTRY_PATH_HINT="$ARCHDIR" \
	  -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
	  -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
	  -DCMAKE_INSTALL_BINDIR="$BINDIR" ..
    make $MF install
    cd "$SDKDIR"
}

# Requires the Vulkan-Loader
buildValidationLayers() {
    echo "~~~Building Vulkan-ValidationLayers~~~"
    cd "$VV_DIR"
    [ -d "${VV_DIR}/${BUILD_DIR}" ] || mkdir -p "${VV_DIR}/${BUILD_DIR}"
    cd "${VV_DIR}/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
	  -DVULKAN_HEADERS_INSTALL_DIR="$ARCHDIR" \
	  -DVULKAN_REGISTRY_PATH_HINT="$ARCHDIR" \
	  -DVULKAN_LOADER_INSTALL_DIR="$ARCHDIR" \
	  -DGLSLANG_INSTALL_DIR="$ARCHDIR" \
	  -DCMAKE_INSTALL_DATAROOTDIR="etc" \
	  -DBUILD_TESTS="OFF" \
	  -DBUILD_LAYER_SUPPORT_FILES="ON" \
	  -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
	  -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
	  -DCMAKE_INSTALL_BINDIR="$BINDIR" ..
    make $MF install
    cd "$SDKDIR"
}

# Requires the Vulkan-Loader
buildVT() {
    echo "~~~Building Vulkan-Tools~~~"
    cd "$VT_DIR"
    [ -d "${VT_DIR}/${BUILD_DIR}" ] || mkdir -p "${VT_DIR}/${BUILD_DIR}"
    cd "${VT_DIR}/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="$BUILD_TYPE" -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
	  -DVULKAN_LOADER_INSTALL_DIR="$ARCHDIR" \
	  -DGLSLANG_INSTALL_DIR="$ARCHDIR" \
	  -DVULKAN_HEADERS_INSTALL_DIR="$ARCHDIR" \
	  -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
	  -DCMAKE_INSTALL_BINDIR="$BINDIR" ..
    make $MF install
    cd "$SDKDIR"
}

# Requires Vulkan-ValidationLayers
buildLGVT() {
    echo "~~~Building LunarG VulkanTools~~~"
    cd "$LGVT_DIR"
    [ -d "${LGVT_DIR}/${BUILD_DIR}" ] || mkdir -p "${LGVT_DIR}/${BUILD_DIR}"
    cd "${LGVT_DIR}/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
	  -DVULKAN_LOADER_INSTALL_DIR="$ARCHDIR" \
	  -DVULKAN_HEADERS_INSTALL_DIR="$ARCHDIR" \
	  -DVULKAN_REGISTRY_PATH_HINT="$ARCHDIR" \
	  -DVULKAN_VALIDATIONLAYERS_INSTALL_DIR="$ARCHDIR" \
	  -DBUILD_TESTS="OFF" \
	  -DBUILD_VKTRACEVIEWER="OFF" \
	  -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
	  -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
	  -DCMAKE_INSTALL_BINDIR="$BINDIR" ..
    make $MF install
    cd "$SDKDIR"
}

# Requires LunarG's VulkanTools
buildVLF() {
    cd "$SDKDIR"/source/layer_factory
    [ -d ${BUILD_DIR} ] || mkdir ${BUILD_DIR}
    cd ${BUILD_DIR}
    cmake -DCMAKE_BUILD_TYPE="$BUILD_TYPE" ..
    make $MF
    cd "$SDKDIR"
}

buildShaderc() {
    echo "~~~Building shaderc~~~"
    cd "$SHADERC_DIR"
    python update_shaderc_sources.py
    cd src
    [ -d "${SHADERC_DIR}/src/${BUILD_DIR}" ] || mkdir "${SHADERC_DIR}/src/${BUILD_DIR}"
    cd "${SHADERC_DIR}/src/${BUILD_DIR}"
    cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE="Release" \
	  -DSHADERC_SKIP_INSTALL="OFF" -DSHADERC_SKIP_TESTS="ON" \
	  -DSKIP_SPIRV_TOOLS_INSTALL="ON" -DSKIP_GLSLANG_INSTALL="ON" \
	  -DCMAKE_INSTALL_PREFIX="$ARCHDIR" -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
	  -DCMAKE_INSTALL_BINDIR="$BINDIR" ..
    make $MF install
    cd "$SDKDIR"
}

buildSpirvCross() {
    echo "~~~Building SPIRV-Cross~~~"
    cd "$SPIRV_CROSS_DIR"
    [ -d "${SPIRV_CROSS_DIR}/${BUILD_DIR}" ] || mkdir "${SPIRV_CROSS_DIR}/${BUILD_DIR}"
    cd "${SPIRV_CROSS_DIR}/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="Release" -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
	  -DCMAKE_INSTALL_BINDIR="$BINDIR" -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
	  -DSPIRV_CROSS_ENABLE_TESTS="OFF" ..
    make $MF install
    cd "$SDKDIR"
}

# Requires glslang
buildSamples() {
    echo "~~~Building Samples~~~"
    cd "$SDKDIR"/samples
    [ -d "${SDKDIR}/samples/${BUILD_DIR}" ] || mkdir "${SDKDIR}/samples/${BUILD_DIR}"
    cd "${SDKDIR}/samples/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="$BUILD_TYPE" ..
    make $MF
    cd "$SDKDIR"
}

cleanBuilds() {
    [ -d "${GLSL_DIR}/${BUILD_DIR}" ] && rm -r "${GLSL_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${VH_DIR}/${BUILD_DIR}" ] && rm -r "${VH_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${VL_DIR}/${BUILD_DIR}" ] && rm -r "${VL_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${VV_DIR}/${BUILD_DIR}" ] && rm -r "${VV_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${VT_DIR}/${BUILD_DIR}" ] && rm -r "${VT_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${LGVT_DIR}/${BUILD_DIR}" ] && rm -r "${LGVT_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${SAMPLES_DIR}/${BUILD_DIR}" ] && rm -r "${SAMPLES_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${SHADERC_DIR}/src" ] && rm -rf "${SHADERC_DIR}/src" 2>/dev/null
    [ -d "${SPIRV_CROSS_DIR}/${BUILD_DIR}" ] && rm -r "${SPIRV_CROSS_DIR}/${BUILD_DIR}" 2>/dev/null
    echo "All Build Directories Removed"
}

buildAll () {
    buildGlslang
    buildHeaders
    buildLoader
    buildVT
    buildValidationLayers
    buildLGVT
    buildShaderc
    buildSamples
    buildSpirvCross
}

SDKDIR="$( dirname "$( readlink -f "${BASH_SOURCE:-$_}" )" )"
if [ -z "$SDKDIR" ] || [ ! -n "$SDKDIR" ] || [ ! -d "$SDKDIR" ]; then
    echo "The SDK directory is invalid"
    exit 1
fi
ARCHDIR="$SDKDIR"/x86_64
BINDIR="$ARCHDIR"/bin
SHAREDDIR="$ARCHDIR"/shared
LIBDIR="$ARCHDIR"/lib
INCLUDEDIR="$ARCHDIR"/include
SOURCEDIR="$SDKDIR"/source
SAMPLES_DIR="$SDKDIR"/samples

GLSL_DIR="$SOURCEDIR"/glslang
VH_DIR="$SOURCEDIR"/Vulkan-Headers
VL_DIR="$SOURCEDIR"/Vulkan-Loader
VV_DIR="$SOURCEDIR"/Vulkan-ValidationLayers
VT_DIR="$SOURCEDIR"/Vulkan-Tools
LGVT_DIR="$SOURCEDIR"/VulkanTools
SHADERC_DIR="$SOURCEDIR"/shaderc
SPIRV_CROSS_DIR="$SOURCEDIR"/SPIRV-Cross

MF=""
if [ -z ${MAKEFLAGS+xyz} ]; then
    if [ -x "$(command -v nproc)" ]; then
	MF=-j`nproc`
    fi
fi

BUILD_DIR="build"
BUILD_TYPE="RelWithDebInfo"

if [ $# -eq 0 ]; then
    usage
fi

while test $# -gt 0; do
    case "$1" in
	all)
	    buildAll
	    ;;
	[Vv]ulkan[Ss]amples|samples)
	    buildGlslang
	    buildSamples
	    ;;
	[Vv]ulkan-[Hh]eaders|headers)
	    buildHeaders
	    buildLoader
	    ;;
	[Vv]ulkan-[Ll]oader|loader)
	    buildHeaders
	    buildLoader
	    ;;
	[Vv]ulkan-[Vv]alidation[Ll]ayers|layers)
	    buildGlslang
	    buildHeaders
	    buildLoader
	    buildValidationLayers
	    ;;
	[Vv]ulkan-[Tt]ools|[Kk]hronos-[Tt]ools|tools)
	    buildGlslang
	    buildHeaders
	    buildLoader
	    buildVT
	    ;;
	[Vv]ulkan[Tt]ools|lunarg-tools)
	    buildGlslang
	    buildHeaders
	    buildLoader
	    buildValidationLayers
	    buildLGVT
	    ;;
	shaderc)
	    buildShaderc
	    ;;
	glslang)
	    buildGlslang
	    ;;
	SPIRV-Tools|spirv-tools|spirvtools)
	    buildGlslang
	    ;;
	SPIRV-Cross|spirv-cross|spirvcross)
	    buildSpirvCross
	    ;;
	vlf)
	    buildVLF
	    ;;
	clean)
	    cleanBuilds
	    ;;
	help|--help|-h)
	    usage
	    ;;
	*)
	    echo "error: unknown option" && usage
	    ;;
    esac
    shift
done
