#include <iostream>
#include "../../../EngineManager.h"
#include "../../../renderer/renderer_api.h"
#include "../../../../external/rapidxml.hpp"
#include "../../../utilities/StringUtils.h"
#include "../../../utilities/ArrayUtils.h"
#include "../../../utilities/Logger.h"
#include "../../../kernel/helpers/xml_helper.h"
#include "../../file_format.h"
#include "collada_reader.h"

static me::log* COLLADA_LOGGER = new me::log("ColladaParser",
"\e[33m[%N] %T #%M \e[0m",
"\e[33m[%N] %T #%M \e[0m",
"\e[33m[%N] %T\e[0m \e[31m#%M \e[0m",
"\e[34m[%N] %T #%M \e[0m"
);

/* HELPERS */

static std::map<std::string, std::string> sources;

std::string getParamValue(std::map<std::string, me::element> &params, me::element &element)
{
  if (element.identifier == "source")
    return getParamValue(params, params[element.value]);
  return element.value;
}

bool processEffectColors(rapidxml::xml_node<>* node, me::fformat::collada_reader::effect* effect, me::wcolor* wcolor)
{
  rapidxml::xml_node<>* color = node->first_node("color");
  rapidxml::xml_node<>* texture = node->first_node("texture");
  rapidxml::xml_node<>* v_float = node->first_node("float");
  if (color != 0)
  {
    std::string sid = color->first_attribute("sid")->value();
    std::vector<std::string> colorArgs = me_utils::splitStr(color->value(), ' ');
    // TODO: combine color args to integer
    wcolor->type = me::wcolor_type::RGBA;
    wcolor->value = 0;
  }else if (texture != 0)
  {
    std::string tex = texture->first_attribute("texture")->value();
    std::string path = getParamValue(effect->params, effect->params[tex]);
    wcolor->type = me::wcolor_type::IMAGE;
    wcolor->value = me::getImageLink(path);
  }else if (v_float != 0)
  {
    wcolor->type = me::wcolor_type::FLOAT;
    //wcolor->value = std::stof(v_float->value());
  }
  return true;
}

bool me::fformat::collada_reader::parse_mesh(rapidxml::xml_node<>* mesh_node, me::mesh* mesh)
{
  rapidxml::xml_node<>* source = mesh_node->first_node("source");
  while(source != nullptr)
  {
    rapidxml::xml_node<>* float_array = source->first_node("float_array");
    std::string arrayId = float_array->first_attribute("id")->value();
    unsigned int count = std::stoi(float_array->first_attribute("count")->value());
    float* array = new float[count];
    me_utils::processStringArray(float_array->value(), [&](unsigned int index, std::string arg) {
      array[index] = std::stof(arg);
    });

    std::string sourceId = source->first_attribute("id")->value();
    if (me_utils::strEndsWith(sourceId, "positions"))
    {
      mesh->positions.allocate_mem(count/3);
      me::toVec3f(array, &mesh->positions.values[0], count);
    }else if (me_utils::strEndsWith(sourceId, "normals"))
    {
      mesh->normals.allocate_mem(count/3);
      me::toVec3f(array, &mesh->normals.values[0], count);
    }else if (me_utils::strEndsWith(sourceId, "map-0"))
    {
      mesh->texCoords.allocate_mem(count/2);
      me::toVec2f(array, &mesh->texCoords.values[0], count);
    }
    source = source->next_sibling("source");
  }
  return true;
}

bool me::fformat::collada_reader::parse_faces(rapidxml::xml_node<>* mesh_node, me::mesh* mesh)
{
  rapidxml::xml_node<>* triangles_node = mesh_node->first_node("triangles");
  std::vector<std::string> faceArgs = me_utils::splitStr(triangles_node->first_node("p")->value(), ' ');
  mesh->indices.allocate_mem(faceArgs.size());
  for (int i = 0; i < faceArgs.size(); i++)
    mesh->indices.values[i] = std::stoi(faceArgs.at(i));
  rapidxml::xml_node<>* input_node = triangles_node->first_node("input");
  int vertexOffset, normalOffset, texCoordOffset;
  while(input_node != 0)
  {
    std::string semantic = input_node->first_attribute("semantic")->value();
    if (semantic=="VERTEX")
      vertexOffset = std::stoi(input_node->first_attribute("offset")->value());
    else if (semantic=="NORMAL")
      normalOffset = std::stoi(input_node->first_attribute("offset")->value());
    else if (semantic=="TEXCOORD")
      texCoordOffset = std::stoi(input_node->first_attribute("offset")->value());
    input_node = input_node->next_sibling("input");
  }
  return true;
}

bool me::fformat::collada_reader::parse_effect(rapidxml::xml_node<>* effect_node, me::fformat::collada_reader::effect* effect)
{
  rapidxml::xml_node<>* profile_common = effect_node->first_node("profile_COMMON");
  /* Params */
  rapidxml::xml_node<>* param_node = profile_common->first_node("newparam");
  while(param_node != 0)
  {
    /* TODO? params can have more than one element */
    std::string sid = param_node->first_attribute("sid")->value();
    rapidxml::xml_node<>* node1 = param_node->first_node();
    rapidxml::xml_node<>* node2 = node1->first_node();
    std::string type = (node2 != 0 ? node1->name() : ""), identifier = (node2 != 0 ? node2->name() : node1->name()), value = (node2 != 0 ? node2->value() : node1->value());
    me::element element = {type, identifier, value};
    effect->params[sid] = element;
    param_node = param_node->next_sibling("newparam");
  }
  rapidxml::xml_node<>* technique = profile_common->first_node("technique");
  rapidxml::xml_node<>* lambert = technique->first_node("lambert");

  rapidxml::xml_node<>* emission_node = lambert->first_node("emission");
  rapidxml::xml_node<>* ambient_node = lambert->first_node("ambient");
  rapidxml::xml_node<>* diffuse_node = lambert->first_node("diffuse");
  rapidxml::xml_node<>* specular_node = lambert->first_node("specular");
  rapidxml::xml_node<>* shininess_node = lambert->first_node("shininess");
  rapidxml::xml_node<>* reflective_node = lambert->first_node("reflective");
  rapidxml::xml_node<>* reflectivity_node = lambert->first_node("reflectivity");
  rapidxml::xml_node<>* transparent_node = lambert->first_node("transparent");
  rapidxml::xml_node<>* transparency_node = lambert->first_node("transparency");
  rapidxml::xml_node<>* index_of_refraction_node = lambert->first_node("index_of_refraction");

  effect->emission = new wcolor;
  effect->ambient = new wcolor;
  effect->diffuse = new wcolor;
  effect->specular = new wcolor;
  effect->shininess = new wcolor;
  effect->reflective = new wcolor;
  effect->reflectivity = new wcolor;
  effect->transparent = new wcolor;
  effect->transparency = new wcolor;
  effect->index_of_refraction = new wcolor;
  if (emission_node != 0) processEffectColors(emission_node, effect, effect->emission);
  if (ambient_node != 0) processEffectColors(ambient_node, effect, effect->ambient);
  if (diffuse_node != 0) processEffectColors(diffuse_node, effect, effect->diffuse);
  if (specular_node != 0) processEffectColors(specular_node, effect, effect->specular);
  if (shininess_node != 0) processEffectColors(shininess_node, effect, effect->shininess);
  if (reflective_node != 0) processEffectColors(reflective_node, effect, effect->reflective);
  if (reflectivity_node != 0) processEffectColors(reflectivity_node, effect, effect->reflectivity);
  if (transparent_node != 0) processEffectColors(transparent_node, effect, effect->transparent);
  if (transparency_node != 0) processEffectColors(transparency_node, effect, effect->transparency);
  if (index_of_refraction_node != 0) processEffectColors(index_of_refraction_node, effect, effect->index_of_refraction);
  return true;
}

bool me::fformat::collada_reader::parse_camera(rapidxml::xml_node<>* camera_node, me::camera* camera)
{
  rapidxml::xml_node<>* optics = camera_node->first_node("optics");
  rapidxml::xml_node<>* technique_common = optics->first_node("technique_common");
  rapidxml::xml_node<>* perspective = technique_common->first_node("perspective");
  if (perspective != 0)
  {
    camera->focalLength = std::stof(perspective->first_node("xfov")->value());
    camera->aspectRatio = std::stof(perspective->first_node("aspect_ratio")->value());
    camera->znear = std::stod(perspective->first_node("znear")->value());
    camera->zfar = std::stod(perspective->first_node("zfar")->value());
    camera->type = ME_CAMERA_PERSPECTIVE;
  }
  return true;
}

bool me::fformat::collada_reader::parse_light(rapidxml::xml_node<>* light_node, me::light* light)
{
  rapidxml::xml_node<>* technique_common = light_node->first_node("technique_common");
  rapidxml::xml_node<>* point_node = technique_common->first_node("point");
  rapidxml::xml_node<>* spot_node = technique_common->first_node("spot");
  rapidxml::xml_node<>* directional_node = technique_common->first_node("directional");
  if (point_node != 0)
  {
    std::vector<std::string> colorArgs = me_utils::splitStr(point_node->first_node("color")->value(), ' ');
    float alpha = 1.0F;
    if (colorArgs.size() < 3)
    {
      COLLADA_LOGGER->err(std::string("[x < 3] too few arguments in 'color' in { ") + me_helper::getXMLNodePath(light_node) + " }\n");
      return false;
    }
    if (colorArgs.size() > 3)
      alpha = std::stof(colorArgs[3]);
    me::vec4f* color = new me::vec4f(
      std::stof(colorArgs[0]),
      std::stof(colorArgs[1]),
      std::stof(colorArgs[2]),
      alpha);
    /* TODO: */
    double constant_attenuation = std::stod(point_node->first_node("constant_attenuation")->value());
    double linear_attenuation = std::stod(point_node->first_node("linear_attenuation")->value());
    double quadratic_attenuation = std::stod(point_node->first_node("quadratic_attenuation")->value());
  }
  return true;
}

bool me::fformat::collada_reader::parse_scene(rapidxml::xml_node<>* scene_node, std::vector<me::item*> &items)
{
  rapidxml::xml_node<>* node = scene_node->first_node("node");
  while(node != 0)
  {
    std::string identifier = node->first_attribute("id")->value();
    rapidxml::xml_node<>* matrix_node = node->first_node("matrix");
    rapidxml::xml_node<>* geometry_node = node->first_node("instance_geometry");
    rapidxml::xml_node<>* light_node = node->first_node("instance_light");
    rapidxml::xml_node<>* camera_node = node->first_node("instance_camera");
    me::vec3d position(0, 0, 0);
    me::vec3d rotation(0, 0, 0);
    me::vec3d scale(0, 0, 0);
    me::vec3d origin(0, 0, 0);
    if (matrix_node != 0)
    {
      std::vector<std::string> matrixArgs = me_utils::splitStr(matrix_node->value(), ' ');
      double matrix[matrixArgs.size()];
      for (int i = 0; i < matrixArgs.size(); i++)
        matrix[i] = std::stod(matrixArgs.at(i));
      if (matrixArgs.size() >= 3)
      { position.x = matrix[0]; position.y = matrix[1]; position.z = matrix[2]; }
      if (matrixArgs.size() >= 6)
      { rotation.x = matrix[3]; rotation.y = matrix[4]; rotation.z = matrix[5]; }
      if (matrixArgs.size() >= 9)
      { scale.x = matrix[6]; scale.y = matrix[7]; scale.z = matrix[8]; }
      if (matrixArgs.size() >= 12)
      { origin.x = matrix[9]; origin.y = matrix[10]; origin.z = matrix[11]; }
    }
    if (geometry_node != 0)
    {
      std::string url = std::string(geometry_node->first_attribute("url")->value()).substr(1);
      unsigned int meshURL = me::getMeshLink(url);
      items.push_back(new me::item(identifier, me::item_type::MESH, {position, rotation, scale}, meshURL));
      rapidxml::xml_node<>* bind_material_node = geometry_node->first_node("bind_material");
      rapidxml::xml_node<>* technique_common = bind_material_node->first_node("technique_common");
      rapidxml::xml_node<>* instance_material = technique_common->first_node("instance_material");
      if (bind_material_node != 0 && technique_common != 0 && instance_material != 0)
      {
        std::string target = std::string(instance_material->first_attribute("target")->value()).substr(1);
        me::getMesh(meshURL)->material = me::getMaterialLink(target);
      }
    } // TODO: lights, cameras
    node = node->next_sibling();
  }
  return true;
}

/* order: textures, effects, materials, geometries */
int me::fformat::collada_reader::read_mesh(const std::string &file_name, unsigned char* data, uint32_t data_size, std::vector<me::item*> &items)
{
  rapidxml::xml_document<> doc;
  doc.parse<0>((char*)data);
  rapidxml::xml_node<>* node = doc.first_node();
  rapidxml::xml_node<>* library_geometries = node->first_node("library_geometries");
  rapidxml::xml_node<>* library_images = node->first_node("library_images");
  rapidxml::xml_node<>* library_effects = node->first_node("library_effects");
  rapidxml::xml_node<>* library_cameras = node->first_node("library_cameras");
  rapidxml::xml_node<>* library_lights = node->first_node("library_lights");
  rapidxml::xml_node<>* library_visual_scenes = node->first_node("library_visual_scenes");
  rapidxml::xml_node<>* library_materials = node->first_node("library_materials");

  std::map<std::string, me::fformat::collada_reader::effect*> effects;

  /* lights */
  if (library_lights != 0)
  {
    COLLADA_LOGGER->out("Parsing lights:\n");
    rapidxml::xml_node<>* light_node = library_lights->first_node("light");
    while(light_node != 0)
    {
      std::string identifier = light_node->first_attribute("id")->value();
      me::light* light = new me::light;
      light->identifier = identifier;
      COLLADA_LOGGER->out(std::string("  light[") + identifier + "]\n");
      if (!parse_light(light_node, light))
        break;
      me::registerLight(light);
      light_node = light_node->next_sibling("light");
    }
  }

  /* cameras */
  if (library_cameras != 0)
  {
    COLLADA_LOGGER->out("Parsing cameras:\n");
    rapidxml::xml_node<>* camera_node = library_cameras->first_node("camera");
    while(camera_node != 0)
    {
      std::string identifier = camera_node->first_attribute("id")->value();
      me::camera* camera = new me::camera;
      camera->identifier = identifier;
      COLLADA_LOGGER->out(std::string("  camera[") + identifier + "]\n");
      if (!parse_camera(camera_node, camera))
        break;
      me::registerCamera(camera);
      camera_node = camera_node->next_sibling("camera");
    }
  }

  /* images */
  if (library_images != 0)
  {
    COLLADA_LOGGER->out("Parsing images:\n");
    rapidxml::xml_node<>* image_node = library_images->first_node("image");
    while(image_node != 0)
    {
      std::string identifier = image_node->first_attribute("id")->value();
      rapidxml::xml_node<>* init_from = image_node->first_node("init_from");
      me::image* image = me::fformat::read_image(init_from->value());
      COLLADA_LOGGER->out(std::string("  image[") + identifier + "]\n");
      me::registerImage(image);
      image_node = image_node->next_sibling();
    }
  }

  /* effects */
  COLLADA_LOGGER->out("Parsing effects:\n");
  if (library_effects != 0)
  {
    rapidxml::xml_node<>* effect_node = library_effects->first_node("effect");
    while(effect_node != 0)
    {
      std::string identifier = effect_node->first_attribute("id")->value();
      me::fformat::collada_reader::effect* effect = new me::fformat::collada_reader::effect;
      effect->identifier = identifier;
      COLLADA_LOGGER->out(std::string("  effect[") + identifier + "]\n");
      if (!parse_effect(effect_node, effect))
        break;
      effects[identifier] = effect;
      effect_node = effect_node->next_sibling("effect");
    }
  }

  /* geometry */
  if (library_geometries != 0)
  {
    COLLADA_LOGGER->out("Parsing meshes:\n");
    rapidxml::xml_node<>* geometry = library_geometries->first_node("geometry");
    while(geometry != 0)
    {
      std::string identifier = geometry->first_attribute("id")->value();
      me::mesh* mesh = new me::mesh;
      COLLADA_LOGGER->out(std::string("  mesh[") + identifier + "]\n");
      if (!parse_mesh(geometry->first_node("mesh"), mesh))
        break;
      if (!parse_faces(geometry->first_node("mesh"), mesh))
        break;
      me::registerMesh(mesh);
      geometry = geometry->next_sibling("geometry");
    }
  }

  /* materials */
  if (library_materials != 0)
  {
    COLLADA_LOGGER->out("Parsing materials:\n");
    rapidxml::xml_node<>* material_node = library_materials->first_node("material");
    while(material_node != 0)
    {
      std::string identifier = material_node->first_attribute("id")->value();
      std::string effectUrl = std::string(material_node->first_node("instance_effect")->first_attribute("url")->value()).substr(1);
      COLLADA_LOGGER->out(std::string("  material[") + identifier + "]\n");
      me::fformat::collada_reader::effect* effect = effects[effectUrl];
      me::material* material = new me::material(identifier, effect->diffuse, new me::wcolor(me::wcolor_type::FLOAT, 0), new me::wcolor(me::wcolor_type::FLOAT, 0), new me::wcolor(me::wcolor_type::FLOAT, 0), effect->emission, effect->index_of_refraction);
      me::registerMaterial(material);
      material_node = material_node->next_sibling();
    }
  }
  rapidxml::xml_node<>* scene_node = library_visual_scenes->first_node("visual_scene");
  parse_scene(scene_node, items);
  COLLADA_LOGGER->out(std::string("Loaded [") + std::to_string(items.size()) + "] object(s)\n");
  return ME_FINE;
}

bool me::fformat::collada_reader::recognized(const std::string &file_name, unsigned char* data, uint32_t data_size)
{
  if (me_utils::strStartsWith(file_name, "<?xml"))
  {
    rapidxml::xml_document<> doc;
    doc.parse<0>((char*)data); // TODO: will maybe produce errors. "data" does not contain the full document bc memory.
    if (std::string(doc.first_node()->name())=="COLLADA")
      return true;
  }
  return me_utils::strEndsWith(file_name, ".dae") || me_utils::strEndsWith(file_name, ".collada");
}

std::vector<std::string> me::fformat::collada_reader::get_file_exts()
{
  return { "dae", "collada" };
}
